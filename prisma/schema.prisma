// Seology.ai Database Schema
// Based on PRD Section 6: Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users & Authentication
model User {
  id                  String        @id @default(uuid())
  email               String        @unique
  name                String?
  clerkUserId         String        @unique
  plan                Plan          @default(STARTER)
  executionMode       ExecutionMode @default(APPROVE)
  stripeCustomerId    String?
  onboardingCompleted Boolean       @default(false)
  onboardingStep      Int? // Current step if onboarding in progress
  onboardingData      Json? // Store onboarding progress data
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  connections     Connection[]
  sites           Site[]
  aiConversations AIConversation[]
  auditLogs       AuditLog[]
  subscription    Subscription?

  @@map("users")
}

enum Plan {
  STARTER
  GROWTH
  SCALE
}

enum ExecutionMode {
  AUTOMATIC
  PLAN
  APPROVE
}

// Website Connections
model Connection {
  id           String           @id @default(uuid())
  userId       String
  platform     Platform
  domain       String
  displayName  String?
  accessToken  String? // Encrypted (AES-256)
  refreshToken String? // Encrypted
  credentials  Json? // Additional credentials (encrypted)
  status       ConnectionStatus
  lastSync     DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sites   Site[]
  issues  Issue[]
  fixes   Fix[]
  metrics Metric[]

  @@index([userId])
  @@map("connections")
}

// Sites (for Magic.js integration)
model Site {
  id           String    @id @default(uuid())
  userId       String
  connectionId String
  url          String
  apiKey       String? // For Magic.js authentication
  lastScanned  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  connection Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  issues     Issue[]
  metrics    Metric[]
  auditLogs  AuditLog[]
  jobs       Job[]

  @@index([userId])
  @@index([connectionId])
  @@index([apiKey])
  @@map("sites")
}

enum Platform {
  SHOPIFY
  WORDPRESS
  WIX
  WEBFLOW
  SQUARESPACE
  CUSTOM
}

enum ConnectionStatus {
  PENDING
  CONNECTED
  ERROR
  DISCONNECTED
}

// SEO Issues Detected
model Issue {
  id              String        @id @default(uuid())
  connectionId    String
  siteId          String? // For Magic.js integration
  type            String // 'missing_meta', 'broken_link', etc.
  category        IssueCategory
  severity        Severity
  pageUrl         String
  details         Json
  estimatedImpact Int? // 1-10 scale
  status          IssueStatus
  detectedAt      DateTime      @default(now())
  fixedAt         DateTime?

  connection Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  site       Site?      @relation(fields: [siteId], references: [id], onDelete: Cascade)
  fixes      Fix[]

  @@index([connectionId])
  @@index([siteId])
  @@index([status])
  @@index([severity])
  @@map("issues")
}

enum IssueCategory {
  TECHNICAL
  CONTENT
  LINKS
  PERFORMANCE
  MOBILE
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum IssueStatus {
  DETECTED
  FIXING
  FIXED
  FAILED
  FIX_FAILED
  IGNORED
}

// Fixes Applied
model Fix {
  id                String    @id @default(uuid())
  connectionId      String
  issueId           String?
  type              String
  targetUrl         String
  beforeState       Json
  afterState        Json
  method            FixMethod
  status            FixStatus
  appliedAt         DateTime?
  rollbackExpiresAt DateTime? // 90 days from applied
  rolledBackAt      DateTime? // When rollback was performed
  error             String? // Error message if failed
  claudeReasoning   String?
  createdAt         DateTime  @default(now())

  connection Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  issue      Issue?     @relation(fields: [issueId], references: [id])

  @@index([connectionId])
  @@index([status])
  @@index([rollbackExpiresAt])
  @@map("fixes")
}

enum FixMethod {
  AUTOMATIC
  MANUAL
  API
}

enum FixStatus {
  PENDING
  APPLIED
  ROLLING_BACK
  ROLLED_BACK
  ROLLBACK_FAILED
  FAILED
}

// Metrics & Analytics
model Metric {
  id             String   @id @default(uuid())
  connectionId   String
  siteId         String? // For Magic.js integration
  date           DateTime
  organicTraffic Int?
  avgPosition    Float?
  indexedPages   Int?
  backlinks      Int?
  topKeywords    Json?
  createdAt      DateTime @default(now())

  connection Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  site       Site?      @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([connectionId, date])
  @@index([siteId])
  @@map("metrics")
}

// AI Conversations
model AIConversation {
  id        String   @id @default(uuid())
  userId    String
  messages  Json // Array of {role, content, timestamp}
  context   Json? // Site context, issues being discussed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ai_conversations")
}

// Audit Logs
model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  siteId     String? // For Magic.js integration
  action     String // 'fix_applied', 'connection_created', etc.
  resource   String // 'fix', 'connection', 'user'
  resourceId String
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  site Site? @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([siteId])
  @@index([createdAt])
  @@map("audit_logs")
}

// Subscriptions
model Subscription {
  id                   String             @id @default(uuid())
  userId               String             @unique
  stripeSubscriptionId String             @unique
  stripePriceId        String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIALING
}

// Usage Tracking
model Usage {
  id             String   @id @default(uuid())
  userId         String
  month          DateTime // First day of month
  fixesApplied   Int      @default(0)
  aiCallsMade    Int      @default(0)
  sitesConnected Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, month])
  @@index([userId])
  @@map("usage")
}

// Notifications
model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  metadata  Json? // Additional context (issueCount, fixId, usagePercent, etc.)
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())

  @@index([userId, read])
  @@index([userId, createdAt])
  @@map("notifications")
}

enum NotificationType {
  CRAWL_COMPLETE
  FIX_APPLIED
  FIX_FAILED
  USAGE_WARNING
  USAGE_LIMIT_REACHED
  SUBSCRIPTION_UPDATED
  PAYMENT_FAILED
  ROLLBACK_EXPIRING
}

// Background Jobs
model Job {
  id           String    @id @default(uuid())
  type         JobType
  siteId       String? // For site-specific jobs (Magic.js)
  status       JobStatus @default(PENDING)
  priority     Int       @default(0) // Higher = more priority
  payload      Json // Job-specific data
  result       Json? // Job result data
  error        String? // Error message if failed
  attempts     Int       @default(0)
  maxAttempts  Int       @default(3)
  scheduledFor DateTime  @default(now())
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  site Site? @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([status, scheduledFor])
  @@index([type, status])
  @@index([siteId])
  @@index([createdAt])
  @@map("jobs")
}

enum JobType {
  CRAWL_SITE
  ANALYZE_SITE
  CLEANUP_ROLLBACKS
  RESET_USAGE
  SYNC_METRICS
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
